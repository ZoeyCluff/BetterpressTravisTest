---
    - hosts: local

      become: true



      vars:
        db_password: "{{ lookup('password', './passwordfile chars=ascii_letters,digits,hexdigits,punctuation') }}"



      vars_prompt:
        - name: "mysqlpassword"
          prompt: "What is the password for your mysql user?"
          private: no
      tasks:


        - name: ensure variables exist
          stat:
            path: ./variables.yaml
          register: var
          failed_when: var.stat.exists == False

        - name: include vars of variables.yaml
          include_vars:
            file: variables.yaml

        - name: ensure that nginxconfig.conf exists
          stat:
            path: ./configs/nginxconfigDEBIAN.conf.j2
          register: nginx
          failed_when: nginx.stat.exists == False

        - name: ensure that nginxconfigCENTOS.conf exists
          stat:
            path: ./configs/nginxconfigCENTOS.conf.j2
          register: nginx
          failed_when: nginx.stat.exists == False

        - name: ensure that wordpress's config exists
          stat:
            path: ./configs/wp-config-sample.php.j2
          register: wpconfig
          failed_when: wpconfig.stat.exists == False


        - name: allow the installation of PHP 7.3 on ubuntu 18.04
          apt_repository:
             repo: 'ppa:ondrej/php'
             when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")


        - name: ensure ssl dhparam exists
          stat:
            path: /etc/nginx/ssl/dhparam.pem
          register: missingdhparam

        - name: ensure ssl folder exists
          file:
            path: /etc/nginx/ssl/
            state: directory
          when: missingdhparam.stat.exists == False

        - name: generate dhprams
          command: openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048
          when: missingdhparam.stat.exists == False

        - name: update cache
          apt: update_cache=yes
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")


        - name: install epel first
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          yum: name='{{ item }}' state=present
          with_items:
            - epel-release

        - name: install the php rpm from a remote repo
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          yum:
            name: http://rpms.remirepo.net/enterprise/remi-release-7.rpm
            state: present

        - name: update system
          apt: upgrade=dist
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")

        - name: upgrade all packages
          yum: name=* state=latest
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")

        - name: install packages
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          yum: name='{{ item }}' state=present
          with_items:
              - yum-utils



        - name: install packages
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          yum: name='{{ item }}' state=present
          with_items:
              - nginx
              - php73
              - php-mysqlnd
              - php-fpm
              - php-cli
              - php-gd
              - php-json
              - php-mbstring
              - php-mcrypt
              - php-readline
              - php-xml
              - php-zip
              - python-pip
              - mariadb-server
              - mariadb
              - MySQL-python

        - name: install Certbot
          when: (leEmail is defined and ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          yum: name=certbot state=present

        - name: install packages
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")
          apt: name='{{ item }}' state=present
          with_items:
            - nginx
            - php7.3
            - php7.3-mysql
            - php7.3-fpm
            - php7.3-cli
            - php7.3-gd
            - php7.3-json
            - php7.3mbstring
            - php7.3-readline
            - php7.3-xml
            - php7.3-zip
            - python-pip
            - mysql-server
            - mysql-client
            - libmysqlclient-dev
            - python-mysqldb

        - name: install Certbot
          when: (leEmail is defined and ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")
          apt: name=certbot state=present


        - name: stop nginx
          service:
              name: nginx
              state: stopped

        - name: start services
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          service:
              name: mariadb
              state: started

        - name: Create a new databases
          mysql_db:
            name: "{{ domainShort }}"
            login_user: "{{ mysqluser }}"
            login_password: "{{ mysqlpassword }}"
            state: present

        - name: Create a new user
          mysql_user:
            name: "{{ domainShort }}"
            login_user: "{{ mysqluser }}"
            login_password: "{{ mysqlpassword }}"
            password: "{{db_password}}"
            priv: '*.*:ALL'
            state: present
          register: wp_password

        - name: create www folder
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")
          file:
            path: "/var/www/{{fullDomain}}"
            state: directory
            mode: 0755
            owner: www-data
            group: www-data

        - name: create www folder
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          file:
            path: "/var/www/{{fullDomain}}"
            state: directory
            owner: apache
            group: apache

        - name: extract wordpress
          unarchive:
            src: https://wordpress.org/latest.tar.gz
            dest: "/var/www/{{fullDomain}}"
            remote_src: yes
            extra_opts: [--strip-components=1]


        - name: ipv4 www
          cloudflare_dns:
            zone: "{{rootDomain}}"
            record: "{{domainLong}}"
            type: A
            value: "{{ipv4}}"
            account_email: "{{cfemail}}"
            account_api_token: "{{cfapi}}"
          register: ipv4w
          when: cfapi is defined

        - name: ipv4 A record
          cloudflare_dns:
            zone: "{{rootDomain}}"
            record: "{{domainShort}}"
            type: A
            value: "{{ipv4}}"
            account_email: "{{cfemail}}"
            account_api_token: "{{cfapi}}"
          register: ipv4
          when: cfapi is defined


        - name: ipv6 www record
          cloudflare_dns:
            zone: "{{rootDomain}}"
            record: "{{domainLong}}"
            type: AAAA
            value: "{{ipv6}}"
            account_email: "{{cfemail}}"
            account_api_token: "{{cfapi}}"
          register: ipv6w
          when: (ipv6 is defined and cfapi is defined)

        - name: ipv6 record
          cloudflare_dns:
            zone: "{{rootDomain}}"
            record: "{{domainShort}}"
            type: AAAA
            value: "{{ipv6}}"
            account_email: "{{cfemail}}"
            account_api_token: "{{cfapi}}"
          register: ipv6
          when: (ipv6 is defined and cfapi is defined)


        - name: Fetch random salts for WordPress config
          local_action: command curl https://api.wordpress.org/secret-key/1.1/salt/
          register: "wp_salt"


        - name: create letsencrypt directory
          file: name=/var/www/letsencrypt state=directory
          when: leEmail is defined

        - name: Install nginx config for HTTPS site
          template:
              src: configs/nginxconfigDEBIAN.conf.j2
              dest: "/etc/nginx/sites-enabled/{{fullDomain}}.conf"
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu" and leEmail is defined)

        - name: Install nginx config for HTTP site
          template:
              src: configs/nginxHTTPconfigDEBIAN.conf.j2
              dest: "/etc/nginx/sites-enabled/{{fullDomain}}.conf"
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu" and leEmail is not defined)

        - name: Install nginx config for HTTPS site
          template:
              src: configs/nginxconfigCENTOS.conf.j2
              dest: "/etc/nginx/conf.d/{{fullDomain}}.conf"
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux" and leEmail is defined)

        - name: Install nginx config for HTTP site
          template:
            src: configs/nginxHTTPconfigCENTOS.conf.j2
            dest: "/etc/nginx/sites-enabled/{{fullDomain}}.conf"
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux" and leEmail is not defined)



        - name: Install nginx config for Debian/ Ubuntu
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")
          copy:
              src: configs/nginxDEBIAN.conf
              dest: "/etc/nginx/nginx.conf"

        - name: Install nginx config for Debian/ Ubuntu
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          copy:
              src: configs/nginxCENTOS.conf
              dest: "/etc/nginx/nginx.conf"

        - name: Install Wordpress config
          template:
            src: configs/wp-config-sample.php.j2
            dest: "/var/www/{{fullDomain}}/wp-config.php"

        - name: fix permissions the lazy way
          shell:
            chdir: "/var/www/{{fullDomain}}"
            cmd: find . -type f -exec chmod 664 {} +

        - name: fix permissions the lazy way
          shell:
            chdir: "/var/www/{{fullDomain}}"
            cmd: find . -type d -exec chmod 775 {} +

        - name: change folder permissions
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")
          file:
            path: "/var/www/{{fullDomain}}"
            owner: www-data
            group: www-data
            recurse: yes

        - name: change folder permissions
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          file:
            path: "/var/www/{{fullDomain}}"
            owner: apache
            group: apache
            recurse: yes

        - name: Open https on the firewall
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          firewalld:
            service: https
            permanent: true
            state: enabled

        - name: Open http on the firewall
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          firewalld:
            service: http
            permanent: true
            state: enabled

        - name: restart firewalld
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          service:
              name: firewalld
              state: restarted

        - name: open ports
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")
          ufw:
              rule: allow
              port: '80'
              proto: tcp

        - name: open ports
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")
          ufw:
              rule: allow
              port: '443'
              proto: tcp

        - name: generate letsencrypt certificate
          shell: certbot certonly --agree-tos -a standalone -m {{ leEmail }} -d {{fullDomain}} -d www.{{fullDomain}}
          args:
            creates: /etc/letsencrypt/live/{{ domainLong }}
          when: (LetsEncrypt != "Testing" and leEmail is defined and ipv4w)

        - name: generate letsencrypt certificate
          shell: certbot certonly --agree-tos --staging -a standalone -m {{ leEmail }} -d {{fullDomain}} -d www.{{fullDomain}}
          args:
            creates: /etc/letsencrypt/live/{{ domainLong }}
          when: (LetsEncrypt != "Production" and leEmail is defined and ipv4w )


        - name: start services
          when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu")
          service:
            name: php7.3-fpm
            state: started



        - name: start services
          when: (ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux")
          service:
            name: php-fpm
            state: started

        - name: Add letsencrypt cronjob for testing cert renewal
          cron:
            name: letsencrypt_renewal
            special_time: weekly
            job: service nginx stop && letsencrypt --renew certonly -n --staging -a standalone -m {{ cfemail }} --agree-tos -d {{fullDomain}} -d www.{{fullDomain}} && service nginx restart
          when: (LetsEncrypt != "Production" and leEmail is defined)

        - name: Add letsencrypt cronjob for production cert renewal
          cron:
            name: letsencrypt_renewal
            special_time: weekly
            job: service nginx stop && letsencrypt --renew certonly -n -a standalone -m {{ cfemail }} --agree-tos -d {{fullDomain}} -d www.{{fullDomain}} && service nginx restart
          when: (LetsEncrypt != "Testing" and leEmail is defined)


        - name: restart NGINX for new config to take effect
          service:
            name: nginx
            state: restarted
